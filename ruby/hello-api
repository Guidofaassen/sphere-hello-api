#!/usr/bin/env ruby

require 'yaml'
require 'optparse'
require 'base64'
require 'excon'
require 'json'

def login(client_id, client_secret, project_key)
  encoded = Base64.urlsafe_encode64 "#{client_id}:#{client_secret}"
  headers = { 'Authorization' => "Basic #{encoded}", 'Content-Type' => 'application/x-www-form-urlencoded' }
  body = "grant_type=client_credentials&scope=manage_project:#{project_key}"
  res = Excon.post 'https://auth.sphere.io/oauth/token', :headers => headers, :body => body
  raise "Problems on getting access token from auth.sphere.io: #{res.body}" unless res.status == 200
  JSON.parse(res.body)['access_token']
end

def get_products(token, project_key)
  headers = { 'Authorization' => "Bearer #{token}" }
  res = Excon.get "https://api.sphere.io/#{project_key}/product-projections", :headers => headers
  j = JSON.parse res.body
  puts j['total']
end

options = {}
optparse = OptionParser.new do |opts|
  opts.on '-c', '--client_id CLIENT_ID', "Client ID of your sphere project" do |c|
    options['client_id'] = c
  end
  opts.on '-s', '--client_secret CLIENT_SECRET', "Client secret of your sphere project" do |c|
    options['client_secret'] = c
  end
  opts.on '-p', '--project_key PROJEXT_KEY', "Key of your sphere project" do |c|
    options['project_key'] = c
  end
  opts.on '-f', '--config_file YAML_FILE', "YAML file that contains the other 3 arguments" do |c|
    options[:config_file] = c
  end
  opts.on '-h', '--help', 'Display this screen' do
    puts opts
    exit
  end
end
optparse.parse!

if options[:config_file]
  raise "Can't open config file '#{options[:config_file]}'." unless File.file? options[:config_file]
  c = YAML.load IO.read options[:config_file]
  options.merge! c
end

token = login options['client_id'], options['client_secret'], options['project_key']
get_products token, options['project_key']
